{
	"Value Object Class": {
		"prefix": "voc",
		"description": "値オブジェクトのTypeScriptクラステンプレート",
		"body": [
			"export class ${1:ValueObjectName} {",
			"  private readonly value: ${2:type};",
			"",
			"  private constructor(value: ${2:type}) {",
			"    this.validate(value);",
			"    this.value = value;",
			"  }",
			"",
			"  private validate(value: ${2:type}): void {",
			"    if (${3:validationCondition}) {",
			"      throw new Error(`Invalid ${1:ValueObjectName} value: ${this.toString()}`);",
			"    }",
			"  }",
			"",
			"  public equals(other: ${1:ValueObjectName}): boolean {",
			"    return this.value === other.value;",
			"  }",
			"",
			"  public getValue(): ${2:type} {",
			"    return this.value;",
			"  }",
			"",
			"  public static create(value: ${2:type}): ${1:ValueObjectName} {",
			"    return new ${1:ValueObjectName}(value);",
			"  }",
			"",
			"  public toString(): string {",
			"    return `${this.value}`;",
			"  }",
			"}",
			""
		]
	},
	"Value Object Primitive": {
		"prefix": "vop",
		"description": "プリミティブ型を扱う値オブジェクトのテンプレート",
		"body": [
			"export class ${1:ValueObjectName} {",
			"  private readonly value: ${2:string | number | boolean};",
			"",
			"  private constructor(value: ${2:string | number | boolean}) {",
			"    this.validate(value);",
			"    this.value = value;",
			"  }",
			"",
			"  private validate(value: ${2:string | number | boolean}): void {",
			"    ${3:// バリデーションロジック}",
			"  }",
			"",
			"  public equals(other: ${1:ValueObjectName} | null | undefined): boolean {",
			"    if (!other) return false;",
			"    return this.value === other.value;",
			"  }",
			"",
			"  public getValue(): ${2:string | number | boolean} {",
			"    return this.value;",
			"  }",
			"",
			"  public static create(value: ${2:string | number | boolean}): ${1:ValueObjectName} {",
			"    return new ${1:ValueObjectName}(value);",
			"  }",
			"}",
			""
		]
	},
	"Value Object Id": {
		"prefix": "void",
		"description": "ID値オブジェクトのテンプレート",
		"body": [
			"export class ${1:EntityName}Id {",
			"  private readonly value: string;",
			"",
			"  private constructor(value: string) {",
			"    this.validate(value);",
			"    this.value = value;",
			"  }",
			"",
			"  private validate(value: string): void {",
			"    if (!value || value.trim() === '') {",
			"      throw new Error('IDは空にできません');",
			"    }",
			"    ${2:// 追加のバリデーション（UUIDフォーマット等）}",
			"  }",
			"",
			"  public equals(other: ${1:EntityName}Id | null | undefined): boolean {",
			"    if (!other) return false;",
			"    return this.value === other.value;",
			"  }",
			"",
			"  public getValue(): string {",
			"    return this.value;",
			"  }",
			"",
			"  public static create(value: string): ${1:EntityName}Id {",
			"    return new ${1:EntityName}Id(value);",
			"  }",
			"",
			"  public static generateNew(): ${1:EntityName}Id {",
			"    return ${1:EntityName}Id.create(crypto.randomUUID());",
			"  }",
			"}",
			""
		]
	}
}