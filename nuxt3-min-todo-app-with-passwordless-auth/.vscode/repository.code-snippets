{
  "Repository Pattern": {
    "prefix": "repository-pattern",
    "body": [
      "import type { ${1:Entity} } from './${1:Entity}';",
      "",
      "export interface I${1:Entity}DataSource {",
      "  scan(): Promise<${1:Entity}[]>;",
      "  get(id: string): Promise<${1:Entity} | null>;",
      "  create(data: ${1:Entity}): Promise<${1:Entity}>;",
      "  put(data: ${1:Entity}): Promise<${1:Entity} | null>;",
      "  delete(id: string): Promise<boolean>;",
      "}",
      "",
      "export class ${1:Entity}Repository {",
      "  constructor(private dataSource: I${1:Entity}DataSource) {}",
      "",
      "  async scan(): Promise<${1:Entity}[]> {",
      "    return this.dataSource.scan();",
      "  }",
      "",
      "  async get(id: string): Promise<${1:Entity} | null> {",
      "    return this.dataSource.get(id);",
      "  }",
      "",
      "  async create(entity: ${1:Entity}): Promise<${1:Entity}> {",
      "    return this.dataSource.create(entity);",
      "  }",
      "",
      "  async put(entity: ${1:Entity}): Promise<${1:Entity} | null> {",
      "    return this.dataSource.put(entity);",
      "  }",
      "",
      "  async delete(id: string): Promise<boolean> {",
      "    return this.dataSource.delete(id);",
      "  }",
      "}"
    ],
    "description": "簡易的なEntity, Repository, DataSource の組み合わせテンプレート"
  },
  "MemoryDataSource": {
    "prefix": "memory-data-source",
    "body": [
      "export class MemoryDataSource implements I${1:Entity}DataSource {",
      "  private data: Map<string, ${1:Entity}> = new Map();",
      "",
      "  async scan(): Promise<${1:Entity}[]> {",
      "    return Array.from(this.data.values());",
      "  }",
      "",
      "  async get(id: string): Promise<${1:Entity} | null> {",
      "    return this.data.get(id) || null;",
      "  }",
      "",
      "  async create(entity: ${1:Entity}): Promise<${1:Entity}> {",
      "    if (!entity.id.getValue()) {",
      "      throw new Error('Entity must have an id');",
      "    }",
      "    this.data.set(entity.id.getValue(), entity);",
      "    return entity;",
      "  }",
      "",
      "  async put(entity: ${1:Entity}): Promise<${1:Entity} | null> {",
      "    if (!entity.id.getValue()) {",
      "      throw new Error('Entity must have an id');",
      "    }",
      "    if (!this.data.has(entity.id.getValue())) {",
      "      return null;",
      "    }",
      "    this.data.set(entity.id.getValue(), entity);",
      "    return entity;",
      "  }",
      "",
      "  async delete(id: string): Promise<boolean> {",
      "    return this.data.delete(id);",
      "  }",
      "}"
    ],
    "description": "簡易なMemoryDataSourceの実装"
  }
}
